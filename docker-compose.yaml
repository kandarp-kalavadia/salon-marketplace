services:
  rabbitmq:
    image: rabbitmq:4.1.0
    container_name: rabbitmq
    ports:
      - "15672:15672" # Management UI port
    env_file:
      - ./environment/rabitmq.env
    volumes:
      - ./databases/rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
  grafana:
    image: grafana/grafana-enterprise:12.0.0
    container_name: grafana_container
    ports:
      - "3001:3000"
    volumes:
      - ./grafana/data:/var/lib/grafana
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      - prometheus
      - tempo
  prometheus:
    image: prom/prometheus:v3.4.0
    container_name: prometheus_container
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
  tempo:
    image: grafana/tempo:main-17e20a4-amd64
    container_name: tempo_container
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./tempo/config/tempo.yaml:/etc/tempo.yaml
      - ./tempo/tempo-data:/var/tempo
    ports:
      - "4318:4318" # OTLP HTTP (OpenTelemetry)
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3200/status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
  keycloakdb:
    image: mysql:9.3.0
    container_name: keycloakdb_container
    env_file:
      - ./environment/keycloakdb.env
    volumes:
      - ./databases/keycloakdb_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "$$MYSQL_USER", "-p$$MYSQL_PASSWORD"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
  keycloak:
    image: quay.io/keycloak/keycloak:26.2
    container_name: keycloak_container
    env_file:
      - ./environment/keycloak.env
    ports:
      - "8000:8000"
    depends_on:
      - keycloakdb
    command: start-dev --health-enabled=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
  eurekaserver1:
    build:
      context: ./salon-backend
      dockerfile: eureka-server/Dockerfile
    container_name: eurekaserver1_container
    env_file:
      - ./environment/eureka-server-1.env
    ports:
      - "8761:8761"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8998/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  eurekaserver2:
    build:
      context: ./salon-backend
      dockerfile: eureka-server/Dockerfile
    container_name: eurekaserver2_container
    env_file:
      - ./environment/eureka-server-2.env
    ports:
      - "8762:8762"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8999/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  gateway-server:
    build:
      context: ./salon-backend
      dockerfile: gateway-server/Dockerfile
    container_name: gatewayserver_container
    env_file:
      - ./environment/gateway-server.env
    ports:
      - "8080:8080"
    depends_on:
      - eurekaserver1
      - eurekaserver2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  user-service:
    build:
      context: ./salon-backend
      dockerfile: user-service/Dockerfile
    container_name: userservice_container
    env_file:
      - ./environment/user-service.env
    depends_on:
      - keycloak
      - eurekaserver1
      - eurekaserver2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9001/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  salonservicedb:
    image: mysql:9.3.0
    container_name: salonservicedb_container
    env_file:
      - ./environment/salonservicedb.env
    volumes:
      - ./databases/salonservicedb_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "$$MYSQL_USER", "-p$$MYSQL_PASSWORD"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
  salon-service:
    build:
      context: ./salon-backend
      dockerfile: salon-service/Dockerfile
    container_name: salonservice_container
    env_file:
      - ./environment/salon-service.env
    volumes:
      - salon_images:/data/uploads/salon-images/
    depends_on:
      keycloak:
        condition: service_started
      salonservicedb:
        condition: service_started
      eurekaserver1:
        condition: service_started
      eurekaserver2:
        condition: service_started
      es01:
        condition: service_healthy
      es02:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9002/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  categoryservicedb:
    image: mysql:9.3.0
    container_name: categoryservicedb_container
    env_file:
      - ./environment/categoryservicedb.env
    volumes:
      - ./databases/categoryservicedb_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "$$MYSQL_USER", "-p$$MYSQL_PASSWORD"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
  category-service:
    build:
      context: ./salon-backend
      dockerfile: category-service/Dockerfile
    container_name: categoryservice_container
    env_file:
      - ./environment/category-service.env
    volumes:
      - category_images:/data/uploads/salon-category-image/
    depends_on:
      - keycloak
      - categoryservicedb
      - eurekaserver1
      - eurekaserver2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9002/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  serviceofferingservicedb:
    image: mysql:9.3.0
    container_name: serviceofferingservicedb_container
    env_file:
      - ./environment/serviceofferingservicedb.env
    volumes:
      - ./databases/serviceofferingservicedb_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "$$MYSQL_USER", "-p$$MYSQL_PASSWORD"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
  serviceoffering-service:
    build:
      context: ./salon-backend
      dockerfile: serviceoffering-service/Dockerfile
    container_name: serviceofferingservice_container
    env_file:
      - ./environment/serviceoffering-service.env
    volumes:
      - service_images:/data/uploads/salon-serviceoffering-image/
    depends_on:
      keycloak:
        condition: service_started
      serviceofferingservicedb:
        condition: service_started
      eurekaserver1:
        condition: service_started
      eurekaserver2:
        condition: service_started
      es01:
        condition: service_healthy
      es02:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  reviewservicedb:
    image: mysql:9.3.0
    container_name: reviewservicedb_container
    env_file:
      - ./environment/reviewservicedb.env
    volumes:
      - ./databases/reviewservicedb_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "$$MYSQL_USER", "-p$$MYSQL_PASSWORD"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
  review-service:
    build:
      context: ./salon-backend
      dockerfile: review-service/Dockerfile
    container_name: reviewservice_container
    env_file:
      - ./environment/review-service.env
    depends_on:
      - keycloak
      - reviewservicedb
      - eurekaserver1
      - eurekaserver2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  bookingservicedb:
    image: mysql:9.3.0
    container_name: bookingservicedb_container
    env_file:
      - ./environment/bookingservicedb.env
    volumes:
      - ./databases/bookingservicedb_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "$$MYSQL_USER", "-p$$MYSQL_PASSWORD"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
  booking-service:
    build:
      context: ./salon-backend
      dockerfile: booking-service/Dockerfile
    container_name: bookingservice_container
    env_file:
      - ./environment/booking-service.env
    depends_on:
      - bookingservicedb
      - eurekaserver1
      - eurekaserver2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9006/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  paymentservicedb:
    image: mysql:9.3.0
    container_name: paymentservicedb_container
    env_file:
      - ./environment/paymentservicedb.env
    volumes:
      - ./databases/paymentservicedb_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "$$MYSQL_USER", "-p$$MYSQL_PASSWORD"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
  payment-service:
    build:
      context: ./salon-backend
      dockerfile: payment-service/Dockerfile
    container_name: paymentservice_container
    env_file:
      - ./environment/payment-service.env
    depends_on:
      - keycloak
      - paymentservicedb
      - eurekaserver1
      - eurekaserver2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  notificationservicedb:
    image: mysql:9.3.0
    container_name: notificationservicedb_container
    env_file:
      - ./environment/notificationservicedb.env
    volumes:
      - ./databases/notificationservicedb_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "$$MYSQL_USER", "-p$$MYSQL_PASSWORD"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
  notification-service:
    build:
      context: ./salon-backend
      dockerfile: notification-service/Dockerfile
    container_name: notificationservice_container
    env_file:
      - ./environment/notification-service.env
    depends_on:
      - keycloak
      - notificationservicedb
      - eurekaserver1
      - eurekaserver2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.18.1
    container_name: es01
    env_file:
    - ./environment/elasticsearch-node1.env
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data01:/usr/share/elasticsearch/data
      - ./elasticsearch/es01.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    ports:
      - 9200:9200
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  es02:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.18.1
    container_name: es02
    env_file:
    - ./environment/elasticsearch-node2.env
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data02:/usr/share/elasticsearch/data
      - ./elasticsearch/es02.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3
   # Frontend Service for prod we need to build the frontend first and then run react app in web server
   # For development below configuration is fine but for production we need multiple build steps in Dockerfile
  frontend:
    build:
      context: ./salon-frontend
      dockerfile: Dockerfile
      #dockerfile: Dockerfile.prod for production
    container_name: salon-frontend
    volumes:
      - ./salon-frontend:/app # for development
      - /app/node_modules # for development
    ports:
      - "3000:3000"
    depends_on:
      - keycloak
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
volumes:
  salon_images:
  category_images:
  service_images:
  data01:
  data02:
