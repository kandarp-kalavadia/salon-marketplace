spring:
  application:
    name: user-service
  security:
   oauth2:
     resourceserver:
       jwt:
         issuer-uri: ${ISSUER_URI:http://localhost:8000/realms/realm-name}

server:
  port: ${SERVER_PORT:8081} # Default port, override with SERVER_PORT env var
  forward-headers-strategy: framework

# Properties that will help to register user service with Eureka client
eureka:
  client:
    register-with-eureka: true # This is Eureka client and it needs to register with Eureka server default is true
    fetch-registry: true # This is Eureka client and it need to fetch registry from eureka server default is true
    service-url:
      defaultZone: ${EUREKA_DEFAULT_ZONE}
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}-${server.port}

keycloak:
  server-url: ${KEYCLOAK_SERVER_URL:http://localhost:8000/}
  realm: ${KEYCLOAK_REALM:realmName}
  clientId: ${KEYCLOAK_CLIENT_ID:clientId}
  credentials:
    secret: ${KEYCLOAK_CLIENT_SECRET:secret}

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus # Expose Actuator endpoints
  endpoint:
    health:
      show-details: always
    prometheus:
      access: unrestricted
  server:
    port: ${MANAGEMENT_SERVER_PORT:9001}
  prometheus:
    metrics:
      export:
        enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
      instance: ${INSTANCE_ID:default-instance}
  tracing:
    enabled: true
    sampling:
      probability: 1.0
  otlp:
    tracing:
      endpoint: ${OTLP_TRACING_ENDPOINT:http://localhost:4318/v1/traces}

springdoc:
  api-docs:
    path: /user-service-doc/v3/api-docs
  swagger-ui:
    enabled: false

openid:
  connect:
    url: ${OPENID_CONNECT_URL:http://openidconnecturl}