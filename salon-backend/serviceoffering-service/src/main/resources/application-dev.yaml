spring:
  application:
    name: serviceoffering-service
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 15MB
  datasource:
    url: ${DATASOURCE_URL:jdbc:mysql://localhost:3306/serviceofferingservicedb}
    username: ${DATASOURCE_USERNAME:username}
    password: ${DATASOURCE_PASSWORD:password}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update # Automatically updates the schema (useful for development)
    show-sql: true # Log SQL queries to the console
    properties:
      hibernate:
        '[format_sql]': true # Format SQL for better readability
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${ISSUER_URI:http://localhost:8000/realms/realm-name}
  cloud:
    openfeign:
      client:
        config:
          default:
            connectTimeout: 1000
            readTimeout: 1000
            loggerLevel: basic
      circuitbreaker:
        enabled: false
  elasticsearch:
    uris: ${ELASTICSEARCH_URL:http://localhost:9200}
          
resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 5
        slidingWindowType: COUNT_BASED
        failureRateThreshold: 50
        waitDurationInOpenState: 60000
        permittedNumberOfCallsInHalfOpenState: 2
        automaticTransitionFromOpenToHalfOpenEnabled: true
        registerHealthIndicator: true
    instances:
      CategoryServiceCall:
        baseConfig: default
      SalonServiceCall:
        baseConfig: default
    circuit-breaker-aspect-order: 1
  retry:
    configs:
      default:
        maxAttempts: 2
        waitDuration: 5000
    instances:
      CategoryServiceCall:
        baseConfig: default
      SalonServiceCall:
        baseConfig: default
    retry-aspect-order: 2 

server:
  port: ${SERVER_PORT:8084} #  override with SERVER_PORT env var
  forward-headers-strategy: framework

eureka:
  client:
    register-with-eureka: true # This is Eureka client and it needs to register with Eureka server default is true
    fetch-registry: true # This is Eureka client and it need to fetch registry from eureka server default is true
    service-url:
      defaultZone: ${EUREKA_DEFAULT_ZONE}
  instance:
    instance-id: ${spring.application.name}-${server.port}
    prefer-ip-address: true


management:
  health:
    circuitbreakers:
      enabled: true
  endpoints:
    web:
      exposure:
        include: health,info,metrics,circuitbreakers,circuitbreakerevents,prometheus # Expose Actuator endpoints
  endpoint:
    health:
      show-details: always
    prometheus:
      access: unrestricted
  server:
    port: ${MANAGEMENT_SERVER_PORT:9004}
  prometheus:
    metrics:
      export:
        enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
      instance: ${INSTANCE_ID:default-instance}
  tracing:
    enabled: true
    sampling:
      probability: 1.0
  otlp:
    tracing:
      endpoint: ${OTLP_TRACING_ENDPOINT:http://localhost:4318/v1/traces}

logging:
  level:
    '[org.springframework.security]': DEBUG
    '[org.springframework.web]': DEBUG
  pattern:
    console: "%d{yyyy-MM-dd'T'HH:mm:ss.SSSXXX} %-5level --- [%thread] %logger{36} : [traceId=%X{traceId:-}, spanId=%X{spanId:-}] %msg%n"

salon:
  service-offering:
    image:
      upload-dir: ${SALON_SERVICE_OFFERING_IMAGE_UPLOAD_DIR:/data/uploads/salon-images/}
      url-prefix: ${SALON_SERVICE_OFFERING_IMAGE_URL_PREFIX:/salons/auth/images/}



springdoc:
  api-docs:
    path: /serviceoffering-service-doc/v3/api-docs
  swagger-ui:
    enabled: false

openid:
  connect:
    url: ${OPENID_CONNECT_URL:http://openidconnecturl}

    